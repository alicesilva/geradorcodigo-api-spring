/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.tcc.mydsl.myDsl.Associacao;
import org.xtext.tcc.mydsl.myDsl.Atributo;
import org.xtext.tcc.mydsl.myDsl.Entidade;
import org.xtext.tcc.mydsl.myDsl.Operacao;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entidade> _filter = Iterables.<Entidade>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entidade.class);
    for (final Entidade e : _filter) {
      String _string = e.getNomeEntidades().getId().toString();
      String _plus = (_string + ".java");
      fsa.generateFile(_plus, this.compile(e));
    }
  }
  
  public CharSequence compile(final Entidade entidade) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import javax.persistence.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Entity");
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(entidade.getNomeEntidades().getId());
    _builder.append(_firstUpper);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _equalsIgnoreCase = entidade.getChavePrimaria().getId().equalsIgnoreCase("id");
      if (_equalsIgnoreCase) {
        _builder.append("\t");
        _builder.append("@Id");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@GeneratedValue(strategy=GenerationType.IDENTITY)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private Integer id;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compileAtributos = this.compileAtributos(entidade.getChavePrimaria().getId(), entidade.getAtributos());
    _builder.append(_compileAtributos, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAtributos(final String chavePrimaria, final EList<Atributo> atributos) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Atributo a : atributos) {
        {
          Associacao _associacao = a.getAssociacao();
          boolean _tripleNotEquals = (_associacao != null);
          if (_tripleNotEquals) {
            {
              Operacao _operacao = a.getOperacao();
              boolean _tripleEquals = (_operacao == null);
              if (_tripleEquals) {
                _builder.append("@");
                String _associacao_1 = a.getAssociacao().getAssociacao();
                _builder.append(_associacao_1);
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("@");
                String _associacao_2 = a.getAssociacao().getAssociacao();
                _builder.append(_associacao_2);
                _builder.append("(cascade = CascadeType.");
                String _opCascada = a.getOperacao().getOpCascada();
                _builder.append(_opCascada);
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          String _tipoP = a.getAtributoTipo().getTipoP();
          boolean _tripleNotEquals_1 = (_tipoP != null);
          if (_tripleNotEquals_1) {
            _builder.append("private ");
            String _firstUpper = StringExtensions.toFirstUpper(a.getAtributoTipo().getTipoP());
            _builder.append(_firstUpper);
            _builder.append(" ");
            String _firstLower = StringExtensions.toFirstLower(a.getAtributoNome().getId());
            _builder.append(_firstLower);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("private ");
            String _firstUpper_1 = StringExtensions.toFirstUpper(a.getAtributoTipo().getTipoE());
            _builder.append(_firstUpper_1);
            _builder.append(" ");
            String _firstLower_1 = StringExtensions.toFirstLower(a.getAtributoNome().getId());
            _builder.append(_firstLower_1);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
      }
    }
    return _builder;
  }
}
