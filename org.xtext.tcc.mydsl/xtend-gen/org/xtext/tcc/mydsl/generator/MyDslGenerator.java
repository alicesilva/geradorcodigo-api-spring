/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.tcc.mydsl.myDsl.Api;
import org.xtext.tcc.mydsl.myDsl.Atributo;
import org.xtext.tcc.mydsl.myDsl.Entidade;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Api> _filter = Iterables.<Api>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Api.class);
    for (final Api a : _filter) {
      Iterable<Entidade> _filter_1 = Iterables.<Entidade>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entidade.class);
      for (final Entidade e : _filter_1) {
        {
          String _string = StringExtensions.toFirstUpper(e.getNomeEntidade().getNome()).toString();
          String _plus = (_string + ".java");
          fsa.generateFile(_plus, this.compile(e));
          String _string_1 = StringExtensions.toFirstUpper(e.getNomeEntidade().getNome()).toString();
          String _plus_1 = (_string_1 + "Repository.java");
          fsa.generateFile(_plus_1, this.compileRepository(e));
          String _string_2 = StringExtensions.toFirstUpper(e.getNomeEntidade().getNome()).toString();
          String _plus_2 = (_string_2 + "Service.java");
          fsa.generateFile(_plus_2, this.compileService(e));
          String _string_3 = StringExtensions.toFirstUpper(e.getNomeEntidade().getNome()).toString();
          String _plus_3 = (_string_3 + "Controller.java");
          fsa.generateFile(_plus_3, this.compileController(a, e));
        }
      }
    }
  }
  
  public CharSequence compile(final Entidade entidade) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _nome = entidade.getPackage().getNome();
    _builder.append(_nome);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import javax.persistence.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Entity");
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Id");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@GeneratedValue(strategy=GenerationType.IDENTITY)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Long id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compileAtributos = this.compileAtributos(entidade.getAtributos());
    _builder.append(_compileAtributos, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _compileGetersSeters = this.compileGetersSeters(entidade.getAtributos());
    _builder.append(_compileGetersSeters, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAtributos(final EList<Atributo> atributos) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Atributo a : atributos) {
        {
          boolean _equals = a.getAssociacao().getAssociacao().equals("None-Associacao");
          boolean _not = (!_equals);
          if (_not) {
            {
              boolean _equals_1 = a.getOperacao().getOpCascada().equals("None-Operacao");
              if (_equals_1) {
                _builder.append("@");
                String _associacao = a.getAssociacao().getAssociacao();
                _builder.append(_associacao);
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("@");
                String _associacao_1 = a.getAssociacao().getAssociacao();
                _builder.append(_associacao_1);
                _builder.append("(cascade = CascadeType.");
                String _opCascada = a.getOperacao().getOpCascada();
                _builder.append(_opCascada);
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          String _tipoP = a.getAtributoTipo().getTipoP();
          boolean _tripleNotEquals = (_tipoP != null);
          if (_tripleNotEquals) {
            _builder.append("private ");
            String _firstUpper = StringExtensions.toFirstUpper(a.getAtributoTipo().getTipoP());
            _builder.append(_firstUpper);
            _builder.append(" ");
            String _firstLower = StringExtensions.toFirstLower(a.getNomeAtributo().getNome());
            _builder.append(_firstLower);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("private ");
            String _firstUpper_1 = StringExtensions.toFirstUpper(a.getAtributoTipo().getTipoE());
            _builder.append(_firstUpper_1);
            _builder.append(" ");
            String _firstLower_1 = StringExtensions.toFirstLower(a.getNomeAtributo().getNome());
            _builder.append(_firstLower_1);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileGetersSeters(final EList<Atributo> atributos) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Atributo a : atributos) {
        {
          String _tipoP = a.getAtributoTipo().getTipoP();
          boolean _tripleNotEquals = (_tipoP != null);
          if (_tripleNotEquals) {
            _builder.append("public ");
            String _tipoP_1 = a.getAtributoTipo().getTipoP();
            _builder.append(_tipoP_1);
            _builder.append(" get");
            String _firstUpper = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
            _builder.append(_firstUpper);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return ");
            String _nome = a.getNomeAtributo().getNome();
            _builder.append(_nome, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("public void set");
            String _firstUpper_1 = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
            _builder.append(_firstUpper_1);
            _builder.append("(");
            String _tipoP_2 = a.getAtributoTipo().getTipoP();
            _builder.append(_tipoP_2);
            _builder.append(" ");
            String _nome_1 = a.getNomeAtributo().getNome();
            _builder.append(_nome_1);
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("this.");
            String _nome_2 = a.getNomeAtributo().getNome();
            _builder.append(_nome_2, "\t");
            _builder.append(" = ");
            String _nome_3 = a.getNomeAtributo().getNome();
            _builder.append(_nome_3, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("public ");
            String _tipoE = a.getAtributoTipo().getTipoE();
            _builder.append(_tipoE);
            _builder.append(" get");
            String _firstUpper_2 = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
            _builder.append(_firstUpper_2);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return ");
            String _nome_4 = a.getNomeAtributo().getNome();
            _builder.append(_nome_4, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("public void set ");
            String _firstUpper_3 = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
            _builder.append(_firstUpper_3);
            _builder.append("(");
            String _tipoP_3 = a.getAtributoTipo().getTipoP();
            _builder.append(_tipoP_3);
            _builder.append(" ");
            String _nome_5 = a.getNomeAtributo().getNome();
            _builder.append(_nome_5);
            _builder.append("){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("this.");
            String _nome_6 = a.getNomeAtributo().getNome();
            _builder.append(_nome_6, "\t");
            _builder.append(" = ");
            String _nome_7 = a.getNomeAtributo().getNome();
            _builder.append(_nome_7, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileRepository(final Entidade entidade) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _nome = entidade.getPackage().getNome();
    _builder.append(_nome);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.data.jpa.repository.JpaRepository;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Repository;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Repository");
    _builder.newLine();
    _builder.append("public interface ");
    String _firstUpper = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper);
    _builder.append("Repository extends JpaRepository<");
    String _firstUpper_1 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_1);
    _builder.append(", Long>{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileService(final Entidade entidade) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _nome = entidade.getPackage().getNome();
    _builder.append(_nome);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Service;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Service");
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper);
    _builder.append("Service {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    String _firstUpper_1 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_1, "\t");
    _builder.append("Repository ");
    String _nome_1 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_1, "\t");
    _builder.append("Repository;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void save(");
    String _firstUpper_2 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_2, "\t");
    _builder.append(" ");
    String _nome_2 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_2, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _nome_3 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_3, "\t\t");
    _builder.append("Repository.save(");
    String _nome_4 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_4, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _firstUpper_3 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_3, "\t");
    _builder.append("> get");
    String _firstUpper_4 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_4, "\t");
    _builder.append("s(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _nome_5 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_5, "\t\t");
    _builder.append("Repository.findAll();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_5 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_5, "\t");
    _builder.append(" get");
    String _firstUpper_6 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_6, "\t");
    _builder.append("ById(Long id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(exists");
    String _firstUpper_7 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_7, "\t\t");
    _builder.append("ById(id)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return ");
    String _nome_6 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_6, "\t\t\t");
    _builder.append("Repository.getOne(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void deleteAll");
    String _firstUpper_8 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_8, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _nome_7 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_7, "\t\t");
    _builder.append("Repository.deleteAll();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Boolean delete");
    String _firstUpper_9 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_9, "\t");
    _builder.append("(Long id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(exists");
    String _firstUpper_10 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_10, "\t\t");
    _builder.append("ById(id)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    String _nome_8 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_8, "\t\t\t");
    _builder.append("Repository.deleteById(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean exists");
    String _firstUpper_11 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_11, "\t");
    _builder.append("ById(Long id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _nome_9 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_9, "\t\t");
    _builder.append("Repository.existsById(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Boolean update");
    String _firstUpper_12 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_12, "\t");
    _builder.append("(Long id, ");
    String _firstUpper_13 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_13, "\t");
    _builder.append(" ");
    String _nome_10 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_10, "\t");
    _builder.append("Update) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(exists");
    String _firstUpper_14 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_14, "\t\t");
    _builder.append("ById(id)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    String _firstUpper_15 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_15, "\t\t\t");
    _builder.append(" ");
    String _nome_11 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_11, "\t\t\t");
    _builder.append(" = get");
    String _firstUpper_16 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_16, "\t\t\t");
    _builder.append("ById(id);");
    _builder.newLineIfNotEmpty();
    {
      EList<Atributo> _atributos = entidade.getAtributos();
      for(final Atributo a : _atributos) {
        _builder.append("\t\t\t");
        String _nome_12 = entidade.getNomeEntidade().getNome();
        _builder.append(_nome_12, "\t\t\t");
        _builder.append(".set");
        String _firstUpper_17 = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
        _builder.append(_firstUpper_17, "\t\t\t");
        _builder.append("(");
        String _nome_13 = entidade.getNomeEntidade().getNome();
        _builder.append(_nome_13, "\t\t\t");
        _builder.append("Update.get");
        String _firstUpper_18 = StringExtensions.toFirstUpper(a.getNomeAtributo().getNome());
        _builder.append(_firstUpper_18, "\t\t\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    String _nome_14 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_14, "\t\t\t");
    _builder.append("Repository.save(");
    String _nome_15 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_15, "\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileController(final Api api, final Entidade entidade) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _nome = entidade.getPackage().getNome();
    _builder.append(_nome);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.http.*;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RestController");
    _builder.newLine();
    _builder.append("@RequestMapping(\"/");
    String _nome_1 = api.getNomeApi().getNome();
    _builder.append(_nome_1);
    _builder.append("-api\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper);
    _builder.append("Controller {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    String _firstUpper_1 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_1, "\t");
    _builder.append("Service ");
    String _nome_2 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_2, "\t");
    _builder.append("Service;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PostMapping(value = \"/");
    String _nome_3 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_3, "\t");
    _builder.append("s\", consumes = MediaType.APPLICATION_JSON_VALUE)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<");
    String _firstUpper_2 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_2, "\t");
    _builder.append("> save(@RequestBody ");
    String _firstUpper_3 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_3, "\t");
    _builder.append(" ");
    String _nome_4 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_4, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(");
    String _nome_5 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_5, "\t\t");
    _builder.append(" == null) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.BAD_REQUEST);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _nome_6 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_6, "\t\t");
    _builder.append("Service.save(");
    String _nome_7 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_7, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<");
    String _firstUpper_4 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_4, "\t\t");
    _builder.append(">(");
    String _nome_8 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_8, "\t\t");
    _builder.append(", HttpStatus.CREATED);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@GetMapping(value = \"");
    String _nome_9 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_9, "\t");
    _builder.append("s\", produces = MediaType.APPLICATION_JSON_VALUE)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<List<");
    String _firstUpper_5 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_5, "\t");
    _builder.append(">> get");
    String _firstUpper_6 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_6, "\t");
    _builder.append("s(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("List<");
    String _firstUpper_7 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_7, "\t\t");
    _builder.append("> ");
    String _nome_10 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_10, "\t\t");
    _builder.append("s = this.");
    String _nome_11 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_11, "\t\t");
    _builder.append("Service.get");
    String _firstUpper_8 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_8, "\t\t");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<List<");
    String _firstUpper_9 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_9, "\t\t");
    _builder.append(">>(");
    String _nome_12 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_12, "\t\t");
    _builder.append("s, HttpStatus.OK);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@GetMapping(value = \"");
    String _nome_13 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_13, "\t");
    _builder.append("s/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<");
    String _firstUpper_10 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_10, "\t");
    _builder.append("> get");
    String _firstUpper_11 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_11, "\t");
    _builder.append("(@PathVariable(\"id\") Long id){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(id == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.BAD_REQUEST);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    String _firstUpper_12 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_12, "\t\t");
    _builder.append(" ");
    String _nome_14 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_14, "\t\t");
    _builder.append(" = ");
    String _nome_15 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_15, "\t\t");
    _builder.append("Service.get");
    String _firstUpper_13 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_13, "\t\t");
    _builder.append("ById(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(");
    String _nome_16 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_16, "\t\t");
    _builder.append(" == null) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<");
    String _firstUpper_14 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_14, "\t\t\t");
    _builder.append(">(");
    String _nome_17 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_17, "\t\t\t");
    _builder.append(", HttpStatus.NOT_FOUND);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<");
    String _firstUpper_15 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_15, "\t\t");
    _builder.append(">(");
    String _nome_18 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_18, "\t\t");
    _builder.append(", HttpStatus.OK);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@DeleteMapping(value = \"");
    String _nome_19 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_19, "\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<String> deleteAll");
    String _firstUpper_16 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_16, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _nome_20 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_20, "\t\t");
    _builder.append("Service.deleteAll");
    String _firstUpper_17 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_17, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<String>(\"");
    String _firstUpper_18 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_18, "\t\t");
    _builder.append("s removidos com sucesso.\", HttpStatus.OK);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@DeleteMapping(value = \"");
    String _nome_21 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_21, "\t");
    _builder.append("s/{id}\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<String> delete");
    String _firstUpper_19 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_19, "\t");
    _builder.append("(@PathVariable(\"id\") Long id){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(id == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.BAD_REQUEST);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean delete = ");
    String _nome_22 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_22, "\t\t");
    _builder.append("Service.delete");
    String _firstUpper_20 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_20, "\t\t");
    _builder.append("(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!delete) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<String>(\"");
    String _firstUpper_21 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_21, "\t\t\t");
    _builder.append(" nao esta cadastrado\", HttpStatus.NOT_FOUND);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<String>(\"");
    String _firstUpper_22 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_22, "\t\t");
    _builder.append(" removido com sucesso.\", HttpStatus.OK);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PutMapping(value = \"");
    String _nome_23 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_23, "\t");
    _builder.append("s/{id}\", consumes = MediaType.APPLICATION_JSON_VALUE)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ResponseEntity<String> update");
    String _firstUpper_23 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_23, "\t");
    _builder.append("(@PathVariable(\"id\") Long id, @RequestBody ");
    String _firstUpper_24 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_24, "\t");
    _builder.append(" ");
    String _nome_24 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_24, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if(id == null || ");
    String _nome_25 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_25, "\t\t");
    _builder.append(" == null) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<>(HttpStatus.BAD_REQUEST);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Boolean update = ");
    String _nome_26 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_26, "\t\t");
    _builder.append("Service.update");
    String _firstUpper_25 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_25, "\t\t");
    _builder.append("(id, ");
    String _nome_27 = entidade.getNomeEntidade().getNome();
    _builder.append(_nome_27, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!update) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ResponseEntity<String>(\"");
    String _firstUpper_26 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_26, "\t\t\t");
    _builder.append("nao esta cadastrado\", HttpStatus.NOT_FOUND);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResponseEntity<String>(\"");
    String _firstUpper_27 = StringExtensions.toFirstUpper(entidade.getNomeEntidade().getNome());
    _builder.append(_firstUpper_27, "\t\t");
    _builder.append(" atualizado com sucesso.\", HttpStatus.OK);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
