/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.tcc.mydsl.myDsl.Api;
import org.xtext.tcc.mydsl.myDsl.ApiNome;
import org.xtext.tcc.mydsl.myDsl.Associacao;
import org.xtext.tcc.mydsl.myDsl.Atributo;
import org.xtext.tcc.mydsl.myDsl.AtributoNome;
import org.xtext.tcc.mydsl.myDsl.AtributoTipo;
import org.xtext.tcc.mydsl.myDsl.ChavePrimaria;
import org.xtext.tcc.mydsl.myDsl.Entidade;
import org.xtext.tcc.mydsl.myDsl.EntidadeNome;
import org.xtext.tcc.mydsl.myDsl.Greeting;
import org.xtext.tcc.mydsl.myDsl.Model;
import org.xtext.tcc.mydsl.myDsl.MyDslPackage;
import org.xtext.tcc.mydsl.myDsl.Operacao;
import org.xtext.tcc.mydsl.myDsl.PackageName;
import org.xtext.tcc.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.API:
				sequence_Api(context, (Api) semanticObject); 
				return; 
			case MyDslPackage.API_NOME:
				sequence_ApiNome(context, (ApiNome) semanticObject); 
				return; 
			case MyDslPackage.ASSOCIACAO:
				sequence_Associacao(context, (Associacao) semanticObject); 
				return; 
			case MyDslPackage.ATRIBUTO:
				sequence_Atributo(context, (Atributo) semanticObject); 
				return; 
			case MyDslPackage.ATRIBUTO_NOME:
				sequence_AtributoNome(context, (AtributoNome) semanticObject); 
				return; 
			case MyDslPackage.ATRIBUTO_TIPO:
				sequence_AtributoTipo(context, (AtributoTipo) semanticObject); 
				return; 
			case MyDslPackage.CHAVE_PRIMARIA:
				sequence_ChavePrimaria(context, (ChavePrimaria) semanticObject); 
				return; 
			case MyDslPackage.ENTIDADE:
				sequence_Entidade(context, (Entidade) semanticObject); 
				return; 
			case MyDslPackage.ENTIDADE_NOME:
				sequence_EntidadeNome(context, (EntidadeNome) semanticObject); 
				return; 
			case MyDslPackage.GREETING:
				sequence_Greeting(context, (Greeting) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OPERACAO:
				sequence_Operacao(context, (Operacao) semanticObject); 
				return; 
			case MyDslPackage.PACKAGE_NAME:
				sequence_PackageName(context, (PackageName) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ApiNome returns ApiNome
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_ApiNome(ISerializationContext context, ApiNome semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.API_NOME__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.API_NOME__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApiNomeAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Api returns Api
	 *
	 * Constraint:
	 *     (nomeApi=ApiNome entidades+=Entidade+)
	 */
	protected void sequence_Api(ISerializationContext context, Api semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Associacao returns Associacao
	 *
	 * Constraint:
	 *     (associacao='OneToOne' | associacao='OneToMany' | associacao='ManyToOne' | associacao='ManyToMany')
	 */
	protected void sequence_Associacao(ISerializationContext context, Associacao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtributoNome returns AtributoNome
	 *
	 * Constraint:
	 *     nome=STRING_LIT
	 */
	protected void sequence_AtributoNome(ISerializationContext context, AtributoNome semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATRIBUTO_NOME__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATRIBUTO_NOME__NOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoNomeAccess().getNomeSTRING_LITTerminalRuleCall_0(), semanticObject.getNome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AtributoTipo returns AtributoTipo
	 *
	 * Constraint:
	 *     (tipoP=TIPO_DEFINIDO | tipoE=STRING_LIT)
	 */
	protected void sequence_AtributoTipo(ISerializationContext context, AtributoTipo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atributo returns Atributo
	 *
	 * Constraint:
	 *     (atributoNome=AtributoNome atributoTipo=AtributoTipo)
	 */
	protected void sequence_Atributo(ISerializationContext context, Atributo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATRIBUTO__ATRIBUTO_NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATRIBUTO__ATRIBUTO_NOME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATRIBUTO__ATRIBUTO_TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATRIBUTO__ATRIBUTO_TIPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoAccess().getAtributoNomeAtributoNomeParserRuleCall_3_0(), semanticObject.getAtributoNome());
		feeder.accept(grammarAccess.getAtributoAccess().getAtributoTipoAtributoTipoParserRuleCall_7_0(), semanticObject.getAtributoTipo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChavePrimaria returns ChavePrimaria
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_ChavePrimaria(ISerializationContext context, ChavePrimaria semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CHAVE_PRIMARIA__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CHAVE_PRIMARIA__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChavePrimariaAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntidadeNome returns EntidadeNome
	 *
	 * Constraint:
	 *     nome=STRING_LIT
	 */
	protected void sequence_EntidadeNome(ISerializationContext context, EntidadeNome semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ENTIDADE_NOME__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ENTIDADE_NOME__NOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntidadeNomeAccess().getNomeSTRING_LITTerminalRuleCall_0(), semanticObject.getNome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidade returns Entidade
	 *
	 * Constraint:
	 *     (nomeEntidades=EntidadeNome atributos+=Atributo+ chavePrimaria=ChavePrimaria package=PackageName)
	 */
	protected void sequence_Entidade(ISerializationContext context, Entidade semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Greeting
	 *
	 * Constraint:
	 *     api=Api
	 */
	protected void sequence_Greeting(ISerializationContext context, Greeting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GREETING__API) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GREETING__API));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreetingAccess().getApiApiParserRuleCall_1_0(), semanticObject.getApi());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     greetings+=Greeting
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operacao returns Operacao
	 *
	 * Constraint:
	 *     (
	 *         opCascada='ALL' | 
	 *         opCascada='DETACH' | 
	 *         opCascada='MERGE' | 
	 *         opCascada='PERSIST' | 
	 *         opCascada='REFRESH' | 
	 *         opCascada='REMOVE'
	 *     )
	 */
	protected void sequence_Operacao(ISerializationContext context, Operacao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageName returns PackageName
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_PackageName(ISerializationContext context, PackageName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PACKAGE_NAME__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PACKAGE_NAME__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageNameAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
}
