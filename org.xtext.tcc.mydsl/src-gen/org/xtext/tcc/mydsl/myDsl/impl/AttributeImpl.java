/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.tcc.mydsl.myDsl.Attribute;
import org.xtext.tcc.mydsl.myDsl.AttributeName;
import org.xtext.tcc.mydsl.myDsl.AttributeType;
import org.xtext.tcc.mydsl.myDsl.Bool;
import org.xtext.tcc.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.AttributeImpl#getAttributeName <em>Attribute Name</em>}</li>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.AttributeImpl#getAttributeType <em>Attribute Type</em>}</li>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.AttributeImpl#getDecisionGet <em>Decision Get</em>}</li>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.AttributeImpl#getDecisionSet <em>Decision Set</em>}</li>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.AttributeImpl#getDecisionID <em>Decision ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttributeImpl extends MinimalEObjectImpl.Container implements Attribute
{
  /**
   * The cached value of the '{@link #getAttributeName() <em>Attribute Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeName()
   * @generated
   * @ordered
   */
  protected AttributeName attributeName;

  /**
   * The cached value of the '{@link #getAttributeType() <em>Attribute Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeType()
   * @generated
   * @ordered
   */
  protected AttributeType attributeType;

  /**
   * The cached value of the '{@link #getDecisionGet() <em>Decision Get</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecisionGet()
   * @generated
   * @ordered
   */
  protected Bool decisionGet;

  /**
   * The cached value of the '{@link #getDecisionSet() <em>Decision Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecisionSet()
   * @generated
   * @ordered
   */
  protected Bool decisionSet;

  /**
   * The cached value of the '{@link #getDecisionID() <em>Decision ID</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecisionID()
   * @generated
   * @ordered
   */
  protected Bool decisionID;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeName getAttributeName()
  {
    return attributeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributeName(AttributeName newAttributeName, NotificationChain msgs)
  {
    AttributeName oldAttributeName = attributeName;
    attributeName = newAttributeName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME, oldAttributeName, newAttributeName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributeName(AttributeName newAttributeName)
  {
    if (newAttributeName != attributeName)
    {
      NotificationChain msgs = null;
      if (attributeName != null)
        msgs = ((InternalEObject)attributeName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME, null, msgs);
      if (newAttributeName != null)
        msgs = ((InternalEObject)newAttributeName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME, null, msgs);
      msgs = basicSetAttributeName(newAttributeName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME, newAttributeName, newAttributeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeType getAttributeType()
  {
    return attributeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributeType(AttributeType newAttributeType, NotificationChain msgs)
  {
    AttributeType oldAttributeType = attributeType;
    attributeType = newAttributeType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE, oldAttributeType, newAttributeType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributeType(AttributeType newAttributeType)
  {
    if (newAttributeType != attributeType)
    {
      NotificationChain msgs = null;
      if (attributeType != null)
        msgs = ((InternalEObject)attributeType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE, null, msgs);
      if (newAttributeType != null)
        msgs = ((InternalEObject)newAttributeType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE, null, msgs);
      msgs = basicSetAttributeType(newAttributeType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE, newAttributeType, newAttributeType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool getDecisionGet()
  {
    return decisionGet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecisionGet(Bool newDecisionGet, NotificationChain msgs)
  {
    Bool oldDecisionGet = decisionGet;
    decisionGet = newDecisionGet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_GET, oldDecisionGet, newDecisionGet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecisionGet(Bool newDecisionGet)
  {
    if (newDecisionGet != decisionGet)
    {
      NotificationChain msgs = null;
      if (decisionGet != null)
        msgs = ((InternalEObject)decisionGet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_GET, null, msgs);
      if (newDecisionGet != null)
        msgs = ((InternalEObject)newDecisionGet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_GET, null, msgs);
      msgs = basicSetDecisionGet(newDecisionGet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_GET, newDecisionGet, newDecisionGet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool getDecisionSet()
  {
    return decisionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecisionSet(Bool newDecisionSet, NotificationChain msgs)
  {
    Bool oldDecisionSet = decisionSet;
    decisionSet = newDecisionSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_SET, oldDecisionSet, newDecisionSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecisionSet(Bool newDecisionSet)
  {
    if (newDecisionSet != decisionSet)
    {
      NotificationChain msgs = null;
      if (decisionSet != null)
        msgs = ((InternalEObject)decisionSet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_SET, null, msgs);
      if (newDecisionSet != null)
        msgs = ((InternalEObject)newDecisionSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_SET, null, msgs);
      msgs = basicSetDecisionSet(newDecisionSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_SET, newDecisionSet, newDecisionSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool getDecisionID()
  {
    return decisionID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecisionID(Bool newDecisionID, NotificationChain msgs)
  {
    Bool oldDecisionID = decisionID;
    decisionID = newDecisionID;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_ID, oldDecisionID, newDecisionID);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecisionID(Bool newDecisionID)
  {
    if (newDecisionID != decisionID)
    {
      NotificationChain msgs = null;
      if (decisionID != null)
        msgs = ((InternalEObject)decisionID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_ID, null, msgs);
      if (newDecisionID != null)
        msgs = ((InternalEObject)newDecisionID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATTRIBUTE__DECISION_ID, null, msgs);
      msgs = basicSetDecisionID(newDecisionID, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATTRIBUTE__DECISION_ID, newDecisionID, newDecisionID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME:
        return basicSetAttributeName(null, msgs);
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE:
        return basicSetAttributeType(null, msgs);
      case MyDslPackage.ATTRIBUTE__DECISION_GET:
        return basicSetDecisionGet(null, msgs);
      case MyDslPackage.ATTRIBUTE__DECISION_SET:
        return basicSetDecisionSet(null, msgs);
      case MyDslPackage.ATTRIBUTE__DECISION_ID:
        return basicSetDecisionID(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME:
        return getAttributeName();
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE:
        return getAttributeType();
      case MyDslPackage.ATTRIBUTE__DECISION_GET:
        return getDecisionGet();
      case MyDslPackage.ATTRIBUTE__DECISION_SET:
        return getDecisionSet();
      case MyDslPackage.ATTRIBUTE__DECISION_ID:
        return getDecisionID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME:
        setAttributeName((AttributeName)newValue);
        return;
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE:
        setAttributeType((AttributeType)newValue);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_GET:
        setDecisionGet((Bool)newValue);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_SET:
        setDecisionSet((Bool)newValue);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_ID:
        setDecisionID((Bool)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME:
        setAttributeName((AttributeName)null);
        return;
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE:
        setAttributeType((AttributeType)null);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_GET:
        setDecisionGet((Bool)null);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_SET:
        setDecisionSet((Bool)null);
        return;
      case MyDslPackage.ATTRIBUTE__DECISION_ID:
        setDecisionID((Bool)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_NAME:
        return attributeName != null;
      case MyDslPackage.ATTRIBUTE__ATTRIBUTE_TYPE:
        return attributeType != null;
      case MyDslPackage.ATTRIBUTE__DECISION_GET:
        return decisionGet != null;
      case MyDslPackage.ATTRIBUTE__DECISION_SET:
        return decisionSet != null;
      case MyDslPackage.ATTRIBUTE__DECISION_ID:
        return decisionID != null;
    }
    return super.eIsSet(featureID);
  }

} //AttributeImpl
