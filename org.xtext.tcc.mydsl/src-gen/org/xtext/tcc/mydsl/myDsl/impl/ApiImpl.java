/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.tcc.mydsl.myDsl.Api;
import org.xtext.tcc.mydsl.myDsl.ApiNome;
import org.xtext.tcc.mydsl.myDsl.Entidade;
import org.xtext.tcc.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Api</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.ApiImpl#getNomeApi <em>Nome Api</em>}</li>
 *   <li>{@link org.xtext.tcc.mydsl.myDsl.impl.ApiImpl#getEntidades <em>Entidades</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ApiImpl extends MinimalEObjectImpl.Container implements Api
{
  /**
   * The cached value of the '{@link #getNomeApi() <em>Nome Api</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNomeApi()
   * @generated
   * @ordered
   */
  protected ApiNome nomeApi;

  /**
   * The cached value of the '{@link #getEntidades() <em>Entidades</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntidades()
   * @generated
   * @ordered
   */
  protected EList<Entidade> entidades;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApiImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.API;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApiNome getNomeApi()
  {
    return nomeApi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNomeApi(ApiNome newNomeApi, NotificationChain msgs)
  {
    ApiNome oldNomeApi = nomeApi;
    nomeApi = newNomeApi;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.API__NOME_API, oldNomeApi, newNomeApi);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNomeApi(ApiNome newNomeApi)
  {
    if (newNomeApi != nomeApi)
    {
      NotificationChain msgs = null;
      if (nomeApi != null)
        msgs = ((InternalEObject)nomeApi).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.API__NOME_API, null, msgs);
      if (newNomeApi != null)
        msgs = ((InternalEObject)newNomeApi).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.API__NOME_API, null, msgs);
      msgs = basicSetNomeApi(newNomeApi, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.API__NOME_API, newNomeApi, newNomeApi));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Entidade> getEntidades()
  {
    if (entidades == null)
    {
      entidades = new EObjectContainmentEList<Entidade>(Entidade.class, this, MyDslPackage.API__ENTIDADES);
    }
    return entidades;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.API__NOME_API:
        return basicSetNomeApi(null, msgs);
      case MyDslPackage.API__ENTIDADES:
        return ((InternalEList<?>)getEntidades()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.API__NOME_API:
        return getNomeApi();
      case MyDslPackage.API__ENTIDADES:
        return getEntidades();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.API__NOME_API:
        setNomeApi((ApiNome)newValue);
        return;
      case MyDslPackage.API__ENTIDADES:
        getEntidades().clear();
        getEntidades().addAll((Collection<? extends Entidade>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.API__NOME_API:
        setNomeApi((ApiNome)null);
        return;
      case MyDslPackage.API__ENTIDADES:
        getEntidades().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.API__NOME_API:
        return nomeApi != null;
      case MyDslPackage.API__ENTIDADES:
        return entidades != null && !entidades.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ApiImpl
