/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.generator

import java.util.ArrayList
import java.util.Arrays
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.tcc.mydsl.myDsl.Api
import org.xtext.tcc.mydsl.myDsl.Atributo
import org.xtext.tcc.mydsl.myDsl.Entidade
import org.xtext.tcc.mydsl.myDsl.Entidades

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Entidades)) {
			fsa.generateFile(e.entidade.nomeEntidade.nome.toFirstUpper.toString + ".java", e.entidade.compile);
			fsa.generateFile(e.entidade.nomeEntidade.nome.toFirstUpper.toString + "Repository.java",
				e.entidade.compileRepository);
			fsa.generateFile(e.entidade.nomeEntidade.nome.toFirstUpper.toString + "Service.java",
				e.entidade.compileService);
			if (e.entidadeMais.size > 0) {
				for (Entidade ent : e.entidadeMais) {
					fsa.generateFile(ent.nomeEntidade.nome.toFirstUpper.toString + ".java", ent.compile);
					fsa.generateFile(ent.nomeEntidade.nome.toFirstUpper.toString + "Repository.java",
						ent.compileRepository);
					fsa.generateFile(ent.nomeEntidade.nome.toFirstUpper.toString + "Service.java", ent.compileService);
				}
			}
		}
		for (a : resource.allContents.toIterable.filter(Api)) {
			fsa.generateFile( "Controller.java", compileController(a));
		}
	}

	def compile(Entidade entidade) '''
		package model;
		import javax.persistence.*;
		import java.sql.*;
		import java.sql.Date;
		import java.util.*;
		
		@Entity
		public class «entidade.nomeEntidade.nome.toFirstUpper» {
			
			@Id
			@GeneratedValue(strategy=GenerationType.IDENTITY)
			private Long id;
			
			«compileAtributos(entidade.atributos.atributo)»
			
			«FOR a : entidade.atributos.atributoMais»
				«compileAtributos(a)»
				
			«ENDFOR»
			public Long getId() {
				return id;
			}
			
			public void setId(Long id) {
				this.id = id;
			}
			
			«compileGetersSeters(entidade.atributos.atributo)»
		
			«FOR a : entidade.atributos.atributoMais»
				«compileGetersSeters(a)»
			«ENDFOR»
		}
	'''

	def compileAtributos(Atributo atributo) '''
		«IF !(atributo.associacao.associacao.equals(""))»
			«IF atributo.operacao === null»
				@«atributo.associacao.associacao»
			«ELSE»
				@«atributo.associacao.associacao»(cascade = {javax.persistence.CascadeType.«atributo.operacao.opCascada.operacao»«FOR o: atributo.operacao.opCascadaMais», CascadeType.«o.operacao»«ENDFOR»})
			«ENDIF»
		«ENDIF»
		«IF atributo.atributoTipo.tipoPrimitivo !== null»
			private «atributo.atributoTipo.tipoPrimitivo.toFirstUpper» «atributo.nomeAtributo.nome.toFirstLower»;
		«ELSEIF atributo.atributoTipo.tipoColecao !== null»
			private «atributo.atributoTipo.tipoColecao.toFirstUpper» «atributo.nomeAtributo.nome.toFirstLower»;
		«ELSE»
			private «atributo.atributoTipo.tipoObjeto.toFirstUpper» «atributo.nomeAtributo.nome.toFirstLower»;
		«ENDIF»
	'''

	def compileGetersSeters(Atributo atributo) '''
		«IF atributo.atributoTipo.tipoPrimitivo !== null»
			public «atributo.atributoTipo.tipoPrimitivo» get«atributo.nomeAtributo.nome.toFirstUpper»(){
				return «atributo.nomeAtributo.nome»;
			}
			
			public void set«atributo.nomeAtributo.nome.toFirstUpper»(« atributo.atributoTipo.tipoPrimitivo» «atributo.nomeAtributo.nome»){
				this.«atributo.nomeAtributo.nome» = «atributo.nomeAtributo.nome»;
			}
		«ELSEIF atributo.atributoTipo.tipoColecao !== null»
			public «atributo.atributoTipo.tipoColecao» get«atributo.nomeAtributo.nome.toFirstUpper»(){
				return «atributo.nomeAtributo.nome»;
			}
			
			public void set«atributo.nomeAtributo.nome.toFirstUpper»(«atributo.atributoTipo.tipoColecao» «atributo.nomeAtributo.nome»){
				this.«atributo.nomeAtributo.nome» = «atributo.nomeAtributo.nome»;
			}
		«ELSE»
			public «atributo.atributoTipo.tipoObjeto.toFirstUpper» get«atributo.nomeAtributo.nome.toFirstUpper»(){
				return «atributo.nomeAtributo.nome»;
			}
							
			public void set«atributo.nomeAtributo.nome.toFirstUpper»(«atributo.atributoTipo.tipoObjeto» «atributo.nomeAtributo.nome»){
				this.«atributo.nomeAtributo.nome» = «atributo.nomeAtributo.nome»;
			}
		«ENDIF»
	'''

	def compileRepository(Entidade entidade) '''
		package repository;
		import org.springframework.data.jpa.repository.JpaRepository;
		import org.springframework.stereotype.Repository;
		import model.«entidade.nomeEntidade.nome.toFirstUpper»;
		
		@Repository
		public interface «entidade.nomeEntidade.nome.toFirstUpper»Repository extends JpaRepository<«entidade.nomeEntidade.nome.toFirstUpper», Long>{
		
		}
		
	'''

	def compileService(Entidade entidade) '''
		package service;
		
		import java.util.List;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Service;
		
		import model.«entidade.nomeEntidade.nome.toFirstUpper»;
		import repository.«entidade.nomeEntidade.nome.toFirstUpper»Repository;
		
		«FOR ent: getTipoAtributos(entidade)»
			import model.«ent.toFirstUpper»
		«ENDFOR»
		
		@Service
		public class «entidade.nomeEntidade.nome.toFirstUpper»Service {
			
			@Autowired
			«entidade.nomeEntidade.nome.toFirstUpper»Repository «entidade.nomeEntidade.nome»Repository;
			
			public void save(«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome») {
				«entidade.nomeEntidade.nome»Repository.save(«entidade.nomeEntidade.nome»);
			}
			
			public List<«entidade.nomeEntidade.nome.toFirstUpper»> get«entidade.nomeEntidade.nome.toFirstUpper»s(){
				return «entidade.nomeEntidade.nome»Repository.findAll();
			}
			
			public «entidade.nomeEntidade.nome.toFirstUpper» get«entidade.nomeEntidade.nome.toFirstUpper»ById(Long id) {
				return «entidade.nomeEntidade.nome»Repository.getOne(id);
			}
			
			public void deleteAll«entidade.nomeEntidade.nome.toFirstUpper»() {
				«entidade.nomeEntidade.nome»Repository.deleteAll();
			}
			
			public void delete«entidade.nomeEntidade.nome.toFirstUpper»(Long id) {
				«entidade.nomeEntidade.nome»Repository.deleteById(id);
			}
				
			public boolean exists«entidade.nomeEntidade.nome.toFirstUpper»ById(Long id) {
				return «entidade.nomeEntidade.nome»Repository.existsById(id);
			}
			
			«IF entidade.atributos.atributo.associacao.associacao.equals("OneToOne") || entidade.atributos.atributo.associacao.associacao.equals("ManyToOne")»
				public void update(Long id, «entidade.atributos.atributo.atributoTipo.tipoObjeto.toFirstUpper» «entidade.atributos.atributo.atributoTipo.tipoObjeto»){
					«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
					«entidade.nomeEntidade.nome».set«entidade.atributos.atributo.nomeAtributo.nome.toFirstUpper»(«entidade.atributos.atributo.atributoTipo.tipoObjeto»);
					«entidade.nomeEntidade.nome»Repository.save(«entidade.nomeEntidade.nome»);
				}
			«ELSEIF entidade.atributos.atributo.associacao.associacao.equals("OneToMany") || entidade.atributos.atributo.associacao.associacao.equals("ManyToMany")»
				«var nome = getNomeTipoColecao(entidade.atributos.atributo.atributoTipo.tipoColecao)»
				public void update(Long id, «nome.toFirstUpper» «nome») {
					«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
					«entidade.nomeEntidade.nome».get«entidade.atributos.atributo.nomeAtributo.nome.toFirstUpper»s().add(«nome»);
					«entidade.nomeEntidade.nome»Repository.save(«entidade.nomeEntidade.nome»);
				}
			«ENDIF»
		
			«FOR atributo: entidade.atributos.atributoMais»
				«IF atributo.associacao.associacao.equals("OneToOne") || atributo.associacao.associacao.equals("ManyToOne")»
					public void update(Long id, «atributo.atributoTipo.tipoObjeto.toFirstUpper» «atributo.atributoTipo.tipoObjeto»){
						«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
						«entidade.nomeEntidade.nome».set«atributo.nomeAtributo.nome.toFirstUpper»(«atributo.atributoTipo.tipoObjeto»);
						«entidade.nomeEntidade.nome»Repository.save(«entidade.nomeEntidade.nome»);
					}
				«ELSEIF atributo.associacao.associacao.equals("OneToMany") || atributo.associacao.associacao.equals("ManyToMany")»
					«var nome = getNomeTipoColecao(atributo.atributoTipo.tipoColecao)»
					public void update(Long id, «nome.toFirstUpper» «nome») {
						«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
						«entidade.nomeEntidade.nome».get«atributo.nomeAtributo.nome.toFirstUpper»().add(«nome»);
						«entidade.nomeEntidade.nome»Repository.save(«entidade.nomeEntidade.nome»);
					}
				«ENDIF»
			«ENDFOR»
		}
	'''
		
	def getTipoAtributos(Entidade entidade) {
		
		var ArrayList<String> tipos = new ArrayList();
		
		var List<String> tiposPrimitivos = new ArrayList(
			Arrays.asList("Boolean", "Integer", "Long", "String", "Float", "Double", "Time", "Timestamp", "Date"));
			
		if(entidade.atributos.atributo. atributoTipo.tipoObjeto !== null){
			tipos.add(entidade.atributos.atributo. atributoTipo.tipoObjeto)
		}else if(entidade.atributos.atributo. atributoTipo.tipoColecao !== null){
			var String nome = getNomeTipoColecao(entidade.atributos.atributo. atributoTipo.tipoColecao)
			if(!tiposPrimitivos.contains(nome)){
				tipos.add(entidade.atributos.atributo. atributoTipo.tipoObjeto)
			}
		}
		
		if(entidade.atributos.atributoMais.size > 0){
			for(a : entidade.atributos.atributoMais){
				if(a.atributoTipo.tipoObjeto !== null){
					tipos.add(a.atributoTipo.tipoObjeto)
				}else if(a.atributoTipo.tipoColecao !== null){
					var String nome = getNomeTipoColecao(a.atributoTipo.tipoColecao)
					if(!tiposPrimitivos.contains(nome)){
						tipos.add(nome)
					}
				}
			}
		}
		
		return tipos;	
	}
	
	def getNomeTipoColecao(String nomeTipo) {
		var int inicio = 0;
		var int fim = 0;
		for (var int i = 0; i < nomeTipo.length; i++) {
			var c = nomeTipo.charAt(i).toString;
			if (c == '<') {
				inicio = i
			}
			if (c.equals(">")) {
				fim = i
			}
		}
		var nome = nomeTipo.substring(inicio + 1, fim);
		return nome;
	}
	
	def compileController(Api api) '''
		package controller;
		import java.util.*;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.http.*;
		import org.springframework.web.bind.annotation.*;
		
		import model.*;
		import service.*;
		
		@RestController
		@RequestMapping("/«api.nomeApi.nome»-api")
		public class HomeController {
			
			@Autowired
			«api.entidades.entidade.nomeEntidade.nome.toFirstUpper»Service «api.entidades.entidade.nomeEntidade.nome.toFirstUpper»Service;
			
			«FOR entidade: api.entidades.entidadeMais»
			@Autowired
			«entidade.nomeEntidade.nome.toFirstUpper»Service «entidade.nomeEntidade.nome»Service;
			
			«ENDFOR»
			
			«compileMetodosController(api.entidades.entidade)»
			
			«FOR e: api.entidades.entidadeMais»
				«compileMetodosController(e)»
			«ENDFOR»
			
		}
	'''
	
	def compileMetodosController(Entidade entidade) '''
		@PostMapping(value = "/«entidade.nomeEntidade.nome»s", consumes = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Pessoa> save«entidade.nomeEntidade.nome.toFirstUpper»(@RequestBody «entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome») {
			if («entidade.nomeEntidade.nome» == null || «entidade.nomeEntidade.nome»Service.exists«entidade.nomeEntidade.nome.toFirstUpper»ById(«entidade.nomeEntidade.nome».getId())) {
				return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
			}
		
			this.«entidade.nomeEntidade.nome»Service.save(«entidade.nomeEntidade.nome»);
		
			return new ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»>(«entidade.nomeEntidade.nome», HttpStatus.CREATED);
		}
			
		@GetMapping(value = "/«entidade.nomeEntidade.nome»s", produces = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<List<«entidade.nomeEntidade.nome.toFirstUpper»>> get«entidade.nomeEntidade.nome.toFirstUpper»s() {
			List<«entidade.nomeEntidade.nome.toFirstUpper»> «entidade.nomeEntidade.nome»s = this.«entidade.nomeEntidade.nome»Service.get«entidade.nomeEntidade.nome.toFirstUpper»s();
			return new ResponseEntity<List<«entidade.nomeEntidade.nome.toFirstUpper»>>(«entidade.nomeEntidade.nome»s, HttpStatus.OK);
		}
		
		@GetMapping(value = "/«entidade.nomeEntidade.nome»s/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»> get«entidade.nomeEntidade.nome.toFirstUpper»(@PathVariable("id") Long id) {
			if (id == null) {
				return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
			}
				
			if(!«entidade.nomeEntidade.nome»Service.exists«entidade.nomeEntidade.nome.toFirstUpper»ById(id)) {
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
				
			«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = «entidade.nomeEntidade.nome»Service.get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
		
			return new ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»>(«entidade.nomeEntidade.nome», HttpStatus.OK);
		}
		
		@DeleteMapping(value = "/«entidade.nomeEntidade.nome»s")
		public ResponseEntity<String> deleteAll«entidade.nomeEntidade.nome.toFirstUpper»() {
			«entidade.nomeEntidade.nome»Service.deleteAll«entidade.nomeEntidade.nome.toFirstUpper»();
			return new ResponseEntity<String>("«entidade.nomeEntidade.nome.toFirstUpper»s removidos com sucesso.", HttpStatus.OK);
		}
		
		@DeleteMapping(value = "/«entidade.nomeEntidade.nome»s/{id}")
		public ResponseEntity<String> delete«entidade.nomeEntidade.nome.toFirstUpper»(@PathVariable("id") Long id) {
			if (id == null) {
				return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
			}
				
			if(!«entidade.nomeEntidade.nome»Service.exists«entidade.nomeEntidade.nome.toFirstUpper»yId(id)) {
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
				
			«entidade.nomeEntidade.nome»Service.delete«entidade.nomeEntidade.nome.toFirstUpper»(id);
		
			return new ResponseEntity<String>("«entidade.nomeEntidade.nome.toFirstUpper» removido com sucesso.", HttpStatus.OK);
		}
		
		«IF entidade.atributos.atributo.associacao !== null»
			«compileAssociacao(entidade.atributos.atributo, entidade.nomeEntidade.nome)»
		«ENDIF»
		
		«FOR a: entidade.atributos.atributoMais»
			«compileAssociacao(a, entidade.nomeEntidade.nome)»
		«ENDFOR»
		 
	'''
	
	def compileAssociacao(Atributo atributo, String nomeEntidade) '''
		«IF atributo.associacao.associacao.equals("OneToOne") || atributo.associacao.associacao.equals("ManyToOne")»
		@PutMapping(value = "/«nomeEntidade»s-«atributo.nomeAtributo.nome»/{«nomeEntidade»Id}/{«atributo.nomeAtributo.nome»Id}", consumes = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity associa«atributo.nomeAtributo.nome.toFirstUpper»To«nomeEntidade.toFirstUpper»(@PathVariable("«nomeEntidade»Id") Long «nomeEntidade»Id,
			@PathVariable("«atributo.nomeAtributo.nome»Id") Long «atributo.nomeAtributo.nome»Id) {
			if (!«nomeEntidade»Service.exists«nomeEntidade.toFirstUpper»yId(«nomeEntidade»Id)) {
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
			if (!«atributo.atributoTipo.tipoObjeto»Service.exists«atributo.atributoTipo.tipoObjeto.toFirstUpper»ById(«atributo.nomeAtributo.nome»Id)) {
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
							
			«atributo.atributoTipo.tipoObjeto.toFirstUpper» «atributo.atributoTipo.tipoObjeto» = «atributo.atributoTipo.tipoObjeto»Service.get«atributo.atributoTipo.tipoObjeto.toFirstUpper»ById(«atributo.nomeAtributo.nome»Id);
			this.«nomeEntidade»Service.update(«nomeEntidade»Id, «atributo.atributoTipo.tipoObjeto»);
							
			return new ResponseEntity("Ok.", HttpStatus.OK);
		}
		«ELSEIF atributo.associacao.associacao.equals("OneToMany") || atributo.associacao.associacao.equals("ManyToMany")»
		@PutMapping(value = "/«nomeEntidade»s-«atributo.nomeAtributo.nome»/{pessoaId}/{«atributo.nomeAtributo.nome»Id}", consumes = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity add«atributo.nomeAtributo.nome»To«nomeEntidade.toFirstUpper»(@PathVariable("«nomeEntidade»Id") Long «nomeEntidade»Id,
			@PathVariable("«atributo.nomeAtributo.nome»Id") Long «atributo.nomeAtributo.nome»Id) {			
			if (!«nomeEntidade»Service.exists«nomeEntidade.toFirstUpper»ById(«nomeEntidade»Id)) {
				return new ResponseEntity(HttpStatus.NOT_FOUND);
			}
			if (!«atributo.atributoTipo.tipoObjeto»Service.exists«atributo.atributoTipo.tipoObjeto.toFirstUpper»ById(«atributo.atributoTipo.tipoObjeto»d)) {
				return new ResponseEntity(HttpStatus.NOT_FOUND);
			}
							
			«var String nome = getNomeTipoColecao(atributo.atributoTipo.tipoColecao)»
			«nome.toFirstUpper» «nome» = «nome»Service.get«nome.toFirstUpper»ById(«atributo.nomeAtributo.nome»Id);
			«nomeEntidade»Service.update(«nomeEntidade»Id, «nome»);
							
			return new ResponseEntity(HttpStatus.OK);
		}
		«ENDIF»
	'''

	def compileController(Api api, Entidade entidade) '''
		package controller;
		import java.util.List;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.http.*;
		import org.springframework.web.bind.annotation.*;
		
		import model.«entidade.nomeEntidade.nome.toFirstUpper»;
		import service.«entidade.nomeEntidade.nome.toFirstUpper»Service;
			
		@RestController
		@RequestMapping("/«api.nomeApi.nome»-api")
		public class «entidade.nomeEntidade.nome.toFirstUpper»Controller {
				
			@Autowired
			«entidade.nomeEntidade.nome.toFirstUpper»Service «entidade.nomeEntidade.nome»Service;
				
			@PostMapping(value = "/«entidade.nomeEntidade.nome»s", consumes = MediaType.APPLICATION_JSON_VALUE)
			public ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»> save(@RequestBody «entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome») {
				if(«entidade.nomeEntidade.nome» == null || «entidade.nomeEntidade.nome»Service.existsContaById(«entidade.nomeEntidade.nome».getId())) {
					return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
				}
					
				this.«entidade.nomeEntidade.nome»Service.save(«entidade.nomeEntidade.nome»);
					
				return new ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»>(«entidade.nomeEntidade.nome», HttpStatus.CREATED);
			}
				
			@GetMapping(value = "/«entidade.nomeEntidade.nome»s", produces = MediaType.APPLICATION_JSON_VALUE)
			public ResponseEntity<List<«entidade.nomeEntidade.nome.toFirstUpper»>> get«entidade.nomeEntidade.nome.toFirstUpper»s(){
				List<«entidade.nomeEntidade.nome.toFirstUpper»> «entidade.nomeEntidade.nome»s = this.«entidade.nomeEntidade.nome»Service.get«entidade.nomeEntidade.nome.toFirstUpper»s();
				return new ResponseEntity<List<«entidade.nomeEntidade.nome.toFirstUpper»>>(«entidade.nomeEntidade.nome»s, HttpStatus.OK);
			}
			
			@GetMapping(value = "/«entidade.nomeEntidade.nome»s/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
			public ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»> get«entidade.nomeEntidade.nome.toFirstUpper»(@PathVariable("id") Long id){
				if(id == null) {
					return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
				}
				«entidade.nomeEntidade.nome.toFirstUpper» «entidade.nomeEntidade.nome» = «entidade.nomeEntidade.nome»Service.get«entidade.nomeEntidade.nome.toFirstUpper»ById(id);
					
				if(«entidade.nomeEntidade.nome» == null) {
					return new ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»>(«entidade.nomeEntidade.nome», HttpStatus.NOT_FOUND);
				}
				
				return new ResponseEntity<«entidade.nomeEntidade.nome.toFirstUpper»>(«entidade.nomeEntidade.nome», HttpStatus.OK);
			}
			
			@DeleteMapping(value = "/«entidade.nomeEntidade.nome»s ")
			public ResponseEntity<String> deleteAll«entidade.nomeEntidade.nome.toFirstUpper»(){
				«entidade.nomeEntidade.nome»Service.deleteAll«entidade.nomeEntidade.nome.toFirstUpper»();
				return new ResponseEntity<String>("«entidade.nomeEntidade.nome.toFirstUpper»s removidos com sucesso.", HttpStatus.OK);
			}
				
			@DeleteMapping(value = "/«entidade.nomeEntidade.nome»s/{id}")
			public ResponseEntity<String> delete«entidade.nomeEntidade.nome.toFirstUpper»(@PathVariable("id") Long id){
				if(id == null) {
					return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
				}
				Boolean delete = «entidade.nomeEntidade.nome»Service.delete«entidade.nomeEntidade.nome.toFirstUpper»(id);
					
				if(!delete) {
					return new ResponseEntity<String>("«entidade.nomeEntidade.nome.toFirstUpper» nao esta cadastrado", HttpStatus.NOT_FOUND);
				}
					
				return new ResponseEntity<String>("«entidade.nomeEntidade.nome.toFirstUpper» removido com sucesso.", HttpStatus.OK);
			}
		}
	'''
}
