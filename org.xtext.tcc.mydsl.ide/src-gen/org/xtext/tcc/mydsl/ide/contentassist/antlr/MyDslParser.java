/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.tcc.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.tcc.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
			builder.put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
			builder.put(grammarAccess.getApiAccess().getGroup(), "rule__Api__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
			builder.put(grammarAccess.getGreetingAccess().getApiAssignment_1(), "rule__Greeting__ApiAssignment_1");
			builder.put(grammarAccess.getApiAccess().getNameApiAssignment_0(), "rule__Api__NameApiAssignment_0");
			builder.put(grammarAccess.getApiAccess().getAttributesAssignment_2(), "rule__Api__AttributesAssignment_2");
			builder.put(grammarAccess.getAPINameAccess().getIdAssignment(), "rule__APIName__IdAssignment");
			builder.put(grammarAccess.getAttributeAccess().getAttributeNameAssignment_4(), "rule__Attribute__AttributeNameAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getAttributeTypeAssignment_7(), "rule__Attribute__AttributeTypeAssignment_7");
			builder.put(grammarAccess.getAttributeAccess().getDecisionGetAssignment_10(), "rule__Attribute__DecisionGetAssignment_10");
			builder.put(grammarAccess.getAttributeAccess().getDecisionSetAssignment_13(), "rule__Attribute__DecisionSetAssignment_13");
			builder.put(grammarAccess.getAttributeAccess().getDecisionIDAssignment_16(), "rule__Attribute__DecisionIDAssignment_16");
			builder.put(grammarAccess.getAttributeNameAccess().getIdAssignment(), "rule__AttributeName__IdAssignment");
			builder.put(grammarAccess.getAttributeTypeAccess().getIdAssignment_0(), "rule__AttributeType__IdAssignment_0");
			builder.put(grammarAccess.getAttributeTypeAccess().getIdAssignment_1(), "rule__AttributeType__IdAssignment_1");
			builder.put(grammarAccess.getAttributeTypeAccess().getIdAssignment_2(), "rule__AttributeType__IdAssignment_2");
			builder.put(grammarAccess.getAttributeTypeAccess().getIdAssignment_3(), "rule__AttributeType__IdAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
