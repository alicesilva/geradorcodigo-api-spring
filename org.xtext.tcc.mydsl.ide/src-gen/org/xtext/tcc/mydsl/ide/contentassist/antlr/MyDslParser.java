/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.tcc.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.tcc.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.tcc.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
			builder.put(grammarAccess.getApiAccess().getGroup(), "rule__Api__Group__0");
			builder.put(grammarAccess.getEntidadeAccess().getGroup(), "rule__Entidade__Group__0");
			builder.put(grammarAccess.getAtributoAccess().getGroup(), "rule__Atributo__Group__0");
			builder.put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
			builder.put(grammarAccess.getGreetingAccess().getApiAssignment_1(), "rule__Greeting__ApiAssignment_1");
			builder.put(grammarAccess.getApiAccess().getNomeApiAssignment_0(), "rule__Api__NomeApiAssignment_0");
			builder.put(grammarAccess.getApiAccess().getEntidadesAssignment_3(), "rule__Api__EntidadesAssignment_3");
			builder.put(grammarAccess.getApiNomeAccess().getIdAssignment(), "rule__ApiNome__IdAssignment");
			builder.put(grammarAccess.getEntidadeAccess().getNomeEntidadeAssignment_1(), "rule__Entidade__NomeEntidadeAssignment_1");
			builder.put(grammarAccess.getEntidadeAccess().getAtributoAssignment_4(), "rule__Entidade__AtributoAssignment_4");
			builder.put(grammarAccess.getEntidadeNomeAccess().getIdAssignment(), "rule__EntidadeNome__IdAssignment");
			builder.put(grammarAccess.getAtributoAccess().getAtributoNomeAssignment_2(), "rule__Atributo__AtributoNomeAssignment_2");
			builder.put(grammarAccess.getAtributoAccess().getAtributoTipoAssignment_5(), "rule__Atributo__AtributoTipoAssignment_5");
			builder.put(grammarAccess.getAtributoAccess().getAssociacaoNomeAssignment_8(), "rule__Atributo__AssociacaoNomeAssignment_8");
			builder.put(grammarAccess.getAtributoAccess().getOperacaoAssignment_11(), "rule__Atributo__OperacaoAssignment_11");
			builder.put(grammarAccess.getAtributoAccess().getNomeEntidadeAssignment_14(), "rule__Atributo__NomeEntidadeAssignment_14");
			builder.put(grammarAccess.getAtributoAccess().getTabelaNomeAssignment_17(), "rule__Atributo__TabelaNomeAssignment_17");
			builder.put(grammarAccess.getAtributoAccess().getColunaNomeAssignment_20(), "rule__Atributo__ColunaNomeAssignment_20");
			builder.put(grammarAccess.getAtributoAccess().getColunaNomeInverseAssignment_23(), "rule__Atributo__ColunaNomeInverseAssignment_23");
			builder.put(grammarAccess.getColunaNomeAccess().getIdAssignment(), "rule__ColunaNome__IdAssignment");
			builder.put(grammarAccess.getTabelaNomeAccess().getIdAssignment(), "rule__TabelaNome__IdAssignment");
			builder.put(grammarAccess.getOperacaoAccess().getIdAssignment(), "rule__Operacao__IdAssignment");
			builder.put(grammarAccess.getAssociacaoNomeAccess().getIdAssignment(), "rule__AssociacaoNome__IdAssignment");
			builder.put(grammarAccess.getAtributoNomeAccess().getIdAssignment(), "rule__AtributoNome__IdAssignment");
			builder.put(grammarAccess.getAtributoTipoAccess().getIdAssignment(), "rule__AtributoTipo__IdAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
